let mapleader=","

" ----- Vundle --------"
set nocompatible              " be iMproved
filetype off                  " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()


" let Vundle manage Vundle
" required! 
Plugin 'VundleVim/Vundle.vim'

" My bundles here:
"
" original repos on GitHub
Plugin 'altercation/vim-colors-solarized'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-markdown'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-git'
Plugin 'timcharper/textile.vim'
Plugin 'skwp/vim-rspec'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'chrisbra/csv.vim'
Plugin 'mmalecki/vim-node.js'
Plugin 'vim-ruby/vim-ruby'
Plugin 'groenewege/vim-less'
Plugin 'slim-template/vim-slim.git'
Plugin 'sunaku/vim-ruby-minitest'
Plugin 'elixir-lang/vim-elixir'

Plugin 'tpope/vim-unimpaired'
  if has("mac")
    " Bubble single lines
    nmap <D-Up> [e
    nmap <D-Down> ]e
    " Bubble multiple lines
    vmap <D-Up> [egv
    vmap <D-Down> ]egv
    " indent visual block
    vmap <D-Right> >gv
    vmap <D-Left> <gv
  elseif has("unix")
    " Bubble single lines
    nmap <C-Up> [e
    nmap <C-Down> ]e
    " Bubble multiple lines
    vmap <C-Up> [egv
    vmap <C-Down> ]egv
    " indent visual block
    vmap <C-Right> >gv
    vmap <C-Left> <gv
  endif

Plugin 'scrooloose/nerdcommenter'
Plugin 'edsono/vim-matchit'
  " % to bounce from do to end etc.
  runtime! macros/matchit.vim

Plugin 'ervandew/supertab'
Plugin 'itspriddle/ZoomWin'
  map <C-a>z :ZoomWin<CR>
  map <Leader><Space> :ZoomWin<CR>
  " Without setting this, ZoomWin restores windows in a way that causes
  " equalalways behavior to be triggered the next time CommandT is used.
  " This is likely a bludgeon to solve some other issue, but it works
  set noequalalways

Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-surround'
Plugin 'garbas/vim-snipmate'
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'scrooloose/syntastic'
  let g:syntastic_javascript_checkers = ['jslint']

Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
  let NERDTreeIgnore=['\.rbc$', '\~$']
  let NERDTreeQuitOnOpen=1
  map <F1> :NERDTreeToggle<CR>
  imap <F1> <Esc>:NERDTreeToggle<CR>

  map º :NERDTreeToggle<CR>
  imap º <Esc>:NERDTreeToggle<CR>

Plugin 'michaeljsmith/vim-indent-object'
Plugin 'tpope/vim-endwise'
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
  if has("mac")
    let g:gist_clip_command = 'pbcopy'
  elseif has("unix")
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1

Plugin 'vim-scripts/vimwiki'
Plugin 'ap/vim-css-color'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'chrisbra/NrrwRgn'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'rgarver/Kwbd.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'skalnik/vim-vroom'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-repeat'
Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-dispatch'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'thinca/vim-visualstar'
Plugin 'bronson/vim-trailing-whitespace'

Plugin 'railscasts'
Plugin 'oguzbilgic/sexy-railscasts-theme'
  colorscheme sexy-railscasts

Plugin 'kurkale6ka/vim-quotes'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'ervandew/sgmlendtag'
Plugin 'acustodioo/vim-enter-indent'
Plugin 'vim-scripts/HTML-AutoCloseTag'
Plugin 'vim-scripts/toggle_words.vim'
Plugin 'vim-scripts/swap-parameters'
Plugin 'mattn/emmet-vim'
let g:user_emmet_leader_key = '<S-Tab>'
Plugin 'gcmt/wildfire.vim'
let g:wildfire_water_map = "<S-Enter>"
Plugin 'rking/ag.vim'
"Bundle 'bling/vim-airline'

"check
"Bundle 'FuzzyFinder'
" non-GitHub repos
"Bundle 'git://git.wincent.com/command-t.git'
" Git repos on your local machine (i.e. when working on your own plugin)
"Bundle 'file:///Users/gmarik/path/to/plugin'
" ...


filetype plugin indent on     " required!
"
" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install (update) bundles
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.
"
"------------ Files from Janus ------------------------------------"
  if filereadable(expand("~/dotfiles/vim/autocmds.vim"))
    source ~/dotfiles/vim/autocmds.vim
  endif
  if filereadable(expand("~/dotfiles/vim/filetypes.vim"))
    source ~/dotfiles/vim/filetypes.vim
  endif
  if filereadable(expand("~/dotfiles/vim/gui_settings.vim"))
    source ~/dotfiles/vim/gui_settings.vim
  endif
  if filereadable(expand("~/dotfiles/vim/mappings.vim"))
    source ~/dotfiles/vim/mappings.vim
  endif
  if filereadable(expand("~/dotfiles/vim/settings.vim"))
    source ~/dotfiles/vim/settings.vim
  endif
  if filereadable(expand("~/dotfiles/vim/statusline.vim"))
    source ~/dotfiles/vim/statusline.vim
  endif
"------------ Files from Janus ------------------------------------"

" GENERAL SETTINGS
set shell=/bin/bash

set nocompatible
set number
set ruler
syntax on
set encoding=utf-8

" buffergator configuration
let g:buffergator_autoexpand_on_split = 0
let g:buffergator_sort_regime = "mru"


" cursor line changes color on insert mode
" hi CursorLine ctermbg=grey cterm=none
hi CursorLine cterm=none
au InsertEnter * set cursorline
au InsertLeave * set nocursorline


" split join shortcuts (overwrite s)
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Toggle wrap
map <F2> :set nowrap! <CR>

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
set wildignore+=*.png,*.jpg,*.gif,*.bmp
set wildmode=list:longest,full
set wildmenu "turn on wild menu
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=*/.nx/**,*.app

" Status bar
set laststatus=2


function! s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

" ctags
let g:rails_ctags_arguments = ['--languages=ruby -f ~/tags']


" maybe done somewhere else
" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
"au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Less is css
"au BufNewFile,BufRead *.less set filetype=css
" .js.node is javascript
au BufNewFile,BufRead *.js.node set filetype=javascript

au BufNewFile,BufRead *.html set filetype=html
au BufRead,BufNewFile *.txt call s:setupWrapping()
"maybe in other plugin -----

" compile less on less buffer save
"au BufWritePost,FileWritePost *.less :silent !~/local/node_modules/less/bin/lessc <afile> > %:r.css

" disable autolessc on less files
"map <Leader><F9> <Esc>:au! BufWritePost,FileWritePost *.less <CR>:au BufNewFile,BufRead *.less set filetype=css

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

noremap 0 ^
noremap ^ 0
map <A-0> ^

" Use modeline overrides
set modeline
set modelines=10

" Directories for swp files
" set backupdir=~/.vim/backup
" set directory=~/.vim/backup
set nobackup
set nowritebackup
set noswapfile

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
" let macvim_hig_shift_movement = 1

map <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>
vmap <C-s> <Esc>:w<CR>

map <D-w> :q<CR>
imap <D-w> :q<CR>

map <C-F> mM:Ack<space>

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" Repeat last change on multiple lines
vmap . :normal .<CR>

" Command-Option-ArrowKey to switch viewports
map <C-k> <C-w>k
imap <C-k> <Esc> <C-w>k
map <C-j> <C-w>j
imap <C-j> <Esc> <C-w>j
map <C-l> <C-w>l
imap <C-l> <Esc> <C-w>l
map <C-h> <C-w>h
imap <C-h> <C-w>h


" split window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>

" split buffer
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>

nnoremap <leader>w <C-w>v<C-w>l

" wordwrapping better experience
nnoremap j gj
nnoremap k gk

"always resubstitute in all lines! (I)
nnoremap & g&


" Adjust viewports to the same size
map <Leader>= <C-w>=
imap <Leader>= <Esc> <C-w>=

inoremap jj <Esc>


" COPY & PASTE WITH SYSTEM CLIPBOARD
if has("mac")
  vmap <C-x> :!pbcopy<CR>
  vmap <C-c> :w !pbcopy<CR><CR>
elseif has("unix")
  imap <C-v> <Esc>"+pa
  vmap <C-c> "+y
endif

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

"css speed
map <F8> <C-x>
map <F9> <C-a>


" custom word toggling
let g:_toggle_words_dict = {'*': [
    \ ['==', '!='], 
    \ ['>', '<'], 
    \ ['(', ')'], 
    \ ['[', ']'], 
    \ ['{', '}'], 
    \ ['+', '-'], 
    \ ['allow', 'deny'], 
    \ ['before', 'after'], 
    \ ['show', 'hide'], 
    \ ['block', 'inline', 'none'],
    \ ['define', 'undef'], 
    \ ['good', 'bad'], 
    \ ['if', 'unless'], 
    \ ['in', 'out'], 
    \ ['left', 'right'],
    \ ['min', 'max'], 
    \ ['on', 'off'], 
    \ ['start', 'stop'], 
    \ ['success', 'failure'], 
    \ ['true', 'false'],
    \ ['up', 'down'], 
    \ ['left', 'right'],
    \ ['yes', 'no'], 
    \ ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'], 
    \ ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'], 
    \ ['1', '0'],
    \ ['should', 'should_not'],
    \ ['be_true', 'be_false'],
    \ [],
    \ ],  }

map <D-o> <Esc>:ToggleWord<CR>

" Escape/Unescape HTML
function! HtmlEscape()
  silent s/&/\&amp;/eg
  silent s/</\&lt;/eg
  silent s/>/\&gt;/eg
endfunction

function! HtmlUnEscape()
  silent s/&lt;/</eg
  silent s/&gt;/>/eg
  silent s/&amp;/\&/eg
endfunction

function! HtmlIndent()
  silent 1,$!xmllint --format --recover - 2>/dev/null 
endfunction



